//现有一个树控件的数据局结构定义如下：
//认为该数据结构可以直接访问，例如 dataTree.name
[{
  "name": "小组1",
  "leaf": false,    // True 表示叶子节点
  "checked": false, // True 表示勾选状态
  "children": [
    {
      "name": "小组2",
      "leaf": false,
      "checked": false,
      "children": [
        {
          "name": "张三",
          "leaf": true,    
          "checked": false,
          "age": 28
        },
        {
          "name": "小组3",
          "leaf": false,
          "checked": false,
          "children": [
            {
              "name": "李四",
              "leaf": true,
              "checked": false,
              "age": 31
            },
            ...     // 可以有任意子节点
          ]
        },
        ...         // 可以有任意子节点
      ]
    }
  ]
},
{
  "name": "小组4",
  "leaf": false,
  "checked": false,
  "children": [
    {
      "name": "王五",
      "leaf": true,
      "checked": false,
      "age": 35
    },
    ...
  ]
}, ...]

问题一：
实现一个树控件的勾选事件响应函数，若一个节点下的任意一个叶子节点勾选则该节点与其所有的父节点都被勾选；若勾选的节点含有子节点，则自动勾选所有子节点。

// 勾选事件函数
// dataTreeList   如上所示的树状数据结构
// checkedName 本次事件勾选的节点名称
// isLeaf   True 表示本次勾选的节点是叶子节点
// 返回
// void    直接修改dataTree中checked属性

// For Java
void onChecked(List<DataTree> dataTreeList, String checkedName, Boolean isLeaf) {

}



问题二：
实现一个函数，求该组织中年龄最大的N个人。（其中保证叶子节点都是人）

// 求最大年龄函数
// dataTreeList   如上所示的树状数据结构
// N    N个人的定义，N=[1, 100]
// 返回
// []     返回最大N个人的名字数据，从大到小[name1,name2,…]

// For Java
String[] getTopN(List<DataTree> dataTreeList, int N) {

}